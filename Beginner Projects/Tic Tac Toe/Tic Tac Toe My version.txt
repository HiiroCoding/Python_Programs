from Player import HumanPlayer, RandomComputerPlayer


class TicTacToe:
    def __init__(self):
        self.board = [' ' for _ in range(9)]  # we will use a single to replicate 3x3 board
        self.current_winner = None  # Keep track of winner

    def Print_Board(self):
        for row in [self.board[i * 3: (i + 1) * 3] for i in range(3)]:
            print('| ' + '| '.join(row) + ' |')

    @staticmethod
    def Print_Board_Nums():
        # 0 | 1 | 2 etc. (Tells us what number corresponds to what box)
        number_board = [[str(i) for i in range(j * 3, (j + 1) * 3)] for j in range(3)]
        for row in number_board:
            print('| ' + '| '.join(row) + ' |')

    def Available_Moves(self):
        return [i for i, spot in enumerate(self.board) if spot == ' ']

    def Empty_Squares(self):
        return ' ' in self.board

    def Num_Empty_Sqaures(self):
        return self.board.count(' ')

    def Make_Move(self, square, letter):
        # If valid move, then make the move (assign square to letter) and then return true, if invalid reutrn false
        if self.board[square] == '':
            self.board[square] == letter
            if self.winner(square, letter):
                self.current_winner = letter
            return True
        return False

    def winner(self, square, letter):
        # Winner if 3 in a row anywehere... We have to check all of these!
        # First Let's check for row
        row_ind = square // 3
        row = self.board[row_ind * 3: (row_ind + 1) * 3]
        if all([spot == letter for spot in row]):
            return True

        # Check Coloumn
        col_ind = square % 3
        column = [self.board[col_ind * 3] for i in range(3)]
        if all([spot == letter for spot in column]):
            return True

        # Check Diagonals
        # Check square is an even number, these are the only possible to win a diagonal
        if square % 2 == 0:
            diagonal1 = [self.board[i] for i in [0, 4, 8]]  # Left to Right Diagonal
            if all([spot == letter for spot in diagonal1]):
                return True
            diagonal2 = [self.board[i] for i in [2, 4, 6]]  # Right to Left Diagonal
            if all([spot == letter for spot in diagonal2]):
                return True

        # If all of these fail
        return False


def Play(game, x_player, o_player, print_game=True):
    if print_game:
        TicTacToe.Print_Board_Nums()

    letter = 'X'  # Starting Letter

    # Iterate while the game still has empty squares
    # We don't have to worry about winner because we'll just return that which breaks the loop

    while TicTacToe.Empty_Squares():
        # Get the move from the appropriate player
        if letter == 'O':
            square = o_player.get_move(game)
        else:
            square = x_player.get_move(game)

        if TicTacToe.Make_Move(square, letter):
            if print_game:
                print(letter + f' Makes a move to square {square}')
                TicTacToe.Print_Board()
                print(' ')  # Just Empty Line

            if TicTacToe.current_winner:
                if print_game:
                    print(letter + 'Wins!!')
                return letter

            # After qw made our move, we need to alternate letters
            letter = 'O' if letter == 'X' else 'X'  # Switches player

    if print_game:
        print("It is a Tie!")


if __name__ == '__main__':
    x_player = HumanPlayer('X')
    o_player = RandomComputerPlayer('O')
    t = TicTacToe()
    Play(t, x_player, o_player, print_game=True)